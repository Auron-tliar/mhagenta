window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "mhagenta", "modulename": "mhagenta", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "mhagenta.Orchestrator", "modulename": "mhagenta", "qualname": "Orchestrator", "kind": "class", "doc": "<p>Orchestrator class that handles MHAgentA execution.</p>\n\n<p>Orchestrator handles definition of agents and their consequent containerization and deployment. It also allows you\nto define default parameters shared by all the agents handles by it (can be overridden by individual agents)</p>\n"}, {"fullname": "mhagenta.Orchestrator.__init__", "modulename": "mhagenta", "qualname": "Orchestrator.__init__", "kind": "function", "doc": "<p>Constructor method for Orchestrator.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>save_dir (str | Path):</strong>  Root directory for storing agents' states, logs, and temporary files.</li>\n<li><strong>port_mapping (dict[int, int], optional):</strong>  Mapping between internal docker container ports and host ports.</li>\n<li><strong>step_frequency (float, optional, default=1.0):</strong>  For agent modules with periodic step functions, the\nfrequency in seconds of the step function calls that modules will try to maintain (unless their\nexecution takes longer, then the next iteration will be scheduled without a time delay).</li>\n<li><strong>status_frequency (float, optional, default=10.0):</strong>  Frequency with which agent modules will report their\nstatuses to the agent's root controller (error statuses will be reported immediately, regardless of\nthe value).</li>\n<li><strong>control_frequency (float, optional):</strong>  Frequency of agent modules' internal clock when there's no tasks\npending. If undefined or not positive, there will be no scheduling delay.</li>\n<li><strong>exec_start_time (float, optional):</strong>  Unix timestamp in seconds of when the agent's execution will try to\nstart (unless agent's initialization takes longer than that; in this case the agent will start\nexecution as soon as it finishes initializing). If not specified, agents will start execution\nimmediately after their initialization.</li>\n<li><strong>agent_start_delay (float, optional, default=5.0):</strong>  Delay in seconds before agents starts execution. Use when\n<code>exec_start_time</code> is not defined to stage synchronous agents start at <code>agent_start_delay</code> seconds from\nthe <code>run()</code> or <code>arun()</code> call.</li>\n<li><strong>exec_duration (float, optional, default=60.0):</strong>   Time limit for agent execution in seconds. All agents will\ntimeout after this time.</li>\n<li><strong>save_format (Literal['json', 'dill'], optional, default='json'):</strong>  Format of agent modules state save files. JSON\nis more restrictive of what fields the states can include, but it is readable by humans.</li>\n<li><strong>resume (bool, optional, default=False):</strong>  Specifies whether to use save module states when restarting an\nagent with preexisting ID.</li>\n<li><strong>log_level (int, optional, default=logging.INFO):</strong>  Logging level.</li>\n<li><strong>log_format (str, optional):</strong>  Format of agent log messages. Defaults to\n<code>[%(agent_time)f|%(mod_time)f|%(exec_time)s][%(levelname)s]::%(tags)s::%(message)s</code></li>\n<li><strong>status_msg_format (str, optional):</strong>  Format of agent status messages for external monitoring. Defaults to\n<code>[status_upd]::{}</code></li>\n<li><strong>connector_cls (type[Connector], optional, default=RabbitMQConnector):</strong>  internal connector class that\nimplements communication between modules. MHAgentA agents use RabbitMQ-based connectors by default.</li>\n<li><strong>connector_kwargs (dict[str, Any], optional):</strong>  Additional keyword arguments for connector. For\nRabbitMQConnector, the default parameters are: {<code>host</code>: 'localhost', <code>port</code>: 5672, <code>prefetch_count</code>: 1}.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">port_mapping</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">step_frequency</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">status_frequency</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">10.0</span>,</span><span class=\"param\">\t<span class=\"n\">control_frequency</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">exec_start_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agent_start_delay</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">5.0</span>,</span><span class=\"param\">\t<span class=\"n\">exec_duration</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">60.0</span>,</span><span class=\"param\">\t<span class=\"n\">save_format</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;json&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dill&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;json&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">resume</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">log_level</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">log_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">status_msg_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;[status_upd]::</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">module_start_delay</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span>,</span><span class=\"param\">\tconnector_cls: type[mhagenta.core.connection.connector.Connector] = &lt;class &#x27;mhagenta.core.connection.rabbitmq_connector.RabbitMQConnector&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">connector_kwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "mhagenta.Orchestrator.add_agent", "modulename": "mhagenta", "qualname": "Orchestrator.add_agent", "kind": "function", "doc": "<p>Define an agent model to be added to the execution.</p>\n\n<p>This can be either a single agent, a set of identical agents following the same structure model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>agent_id (str):</strong>  A unique identifier for the agent.</li>\n<li><strong>perceptors (Iterable[PerceptorBase] | PerceptorBase):</strong>  Definition(s) of agent's perceptor(s).</li>\n<li><strong>actuators (Iterable[ActuatorBase] | ActuatorBase):</strong>  Definition(s) of agent's actuator(s).</li>\n<li><strong>ll_reasoners (Iterable[LLReasonerBase] | LLReasonerBase):</strong>  Definition(s) of agent's ll_reasoner(s).</li>\n<li><strong>learners (Iterable[LearnerBase] | LearnerBase, optional):</strong>  Definition(s) of agent's learner(s).</li>\n<li><strong>knowledge (Iterable[KnowledgeBase] | KnowledgeBase, optional):</strong>  Definition(s) of agent's knowledge model(s).</li>\n<li><strong>hl_reasoners (Iterable[HLReasonerBase] | HLReasonerBase, optional):</strong>  Definition(s) of agent's hl_reasoner(s).</li>\n<li><strong>goal_graphs (Iterable[GoalGraphBase] | GoalGraphBase, optional):</strong>  Definition(s) of agent's goal_graph(s).</li>\n<li><strong>memory (Iterable[MemoryBase] | MemoryBase, optional):</strong>  Definition(s) of agent's memory structure(s).</li>\n<li><strong>num_copies (int, optional, default=1):</strong>  Number of copies of the agent to instantiate at runtime.</li>\n<li><strong>step_frequency (float, optional):</strong>  For agent modules with periodic step functions, the frequency in seconds\nof the step function calls that modules will try to maintain (unless their execution takes longer, then\nthe next iteration will be scheduled without a time delay). Defaults to the Orchestrator's\n<code>step_frequency</code>.</li>\n<li><strong>status_frequency (float, optional):</strong>  Frequency with which agent modules will report their statuses to the\nagent's root controller (error statuses will be reported immediately, regardless of the value).\nDefaults to the Orchestrator's <code>status_frequency</code>.</li>\n<li><strong>control_frequency (float, optional):</strong>  Frequency of agent modules' internal clock when there's no tasks\npending. If undefined or not positive, there will be no scheduling delay. Defaults to the\nOrchestrator's <code>control_frequency</code>.</li>\n<li><strong>exec_start_time (float, optional):</strong>  Unix timestamp in seconds of when the agent's execution will try to\nstart (unless agent's initialization takes longer than that; in this case the agent will start\nexecution as soon as it finishes initializing). Defaults to the Orchestrator's <code>exec_start_time</code>.</li>\n<li><strong>start_delay (float, optional, default=0.0):</strong>  A time offset from the global execution time start when this agent will\nattempt to start its own execution.</li>\n<li><strong>exec_duration (float, optional):</strong>  Time limit for agent execution in seconds. The agent will timeout after\nthis time. Defaults to the Orchestrator's <code>exec_duration</code>.</li>\n<li><strong>resume (bool, optional):</strong>  Specifies whether to use save module states when restarting an agent with\npreexisting ID. Defaults to the Orchestrator's <code>resume</code>.</li>\n<li><strong>log_level (int, optional):</strong>   Logging level for the agent. Defaults to the Orchestrator's <code>log_level</code>.</li>\n<li><strong>port_mapping (dict[int, int], optional):</strong>  Mapping between internal docker container ports and host ports.\nDefaults to the Orchestrator's <code>port_mapping</code>.</li>\n<li><strong>connector_cls (type[Connector], optional):</strong>  internal connector class that implements communication between\nmodules. Defaults to the Orchestrator's <code>connector_cls</code>.</li>\n<li><strong>connector_kwargs (dict[str, Any], optional):</strong>  Additional keyword arguments for connector. Defaults to\nthe Orchestrator's <code>connector_kwargs</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">agent_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">perceptors</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">perception</span><span class=\"o\">.</span><span class=\"n\">perceptor</span><span class=\"o\">.</span><span class=\"n\">PerceptorBase</span><span class=\"p\">],</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">perception</span><span class=\"o\">.</span><span class=\"n\">perceptor</span><span class=\"o\">.</span><span class=\"n\">PerceptorBase</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">actuators</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">actuation</span><span class=\"o\">.</span><span class=\"n\">actuator</span><span class=\"o\">.</span><span class=\"n\">ActuatorBase</span><span class=\"p\">],</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">actuation</span><span class=\"o\">.</span><span class=\"n\">actuator</span><span class=\"o\">.</span><span class=\"n\">ActuatorBase</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">ll_reasoners</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">low_level_reasoner</span><span class=\"o\">.</span><span class=\"n\">LLReasonerBase</span><span class=\"p\">],</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">low_level_reasoner</span><span class=\"o\">.</span><span class=\"n\">LLReasonerBase</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">learners</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">learning</span><span class=\"o\">.</span><span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">LearnerBase</span><span class=\"p\">],</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">learning</span><span class=\"o\">.</span><span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">LearnerBase</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">knowledge</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">high_level</span><span class=\"o\">.</span><span class=\"n\">knowledge</span><span class=\"o\">.</span><span class=\"n\">knowledge</span><span class=\"o\">.</span><span class=\"n\">KnowledgeBase</span><span class=\"p\">],</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">high_level</span><span class=\"o\">.</span><span class=\"n\">knowledge</span><span class=\"o\">.</span><span class=\"n\">knowledge</span><span class=\"o\">.</span><span class=\"n\">KnowledgeBase</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">hl_reasoners</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">high_level</span><span class=\"o\">.</span><span class=\"n\">high_level_reasoner</span><span class=\"o\">.</span><span class=\"n\">HLReasonerBase</span><span class=\"p\">],</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">high_level</span><span class=\"o\">.</span><span class=\"n\">high_level_reasoner</span><span class=\"o\">.</span><span class=\"n\">HLReasonerBase</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">goal_graphs</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">high_level</span><span class=\"o\">.</span><span class=\"n\">goals</span><span class=\"o\">.</span><span class=\"n\">goal_graph</span><span class=\"o\">.</span><span class=\"n\">GoalGraphBase</span><span class=\"p\">],</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">high_level</span><span class=\"o\">.</span><span class=\"n\">goals</span><span class=\"o\">.</span><span class=\"n\">goal_graph</span><span class=\"o\">.</span><span class=\"n\">GoalGraphBase</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">memory</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">MemoryBase</span><span class=\"p\">],</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">MemoryBase</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">num_copies</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">step_frequency</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">status_frequency</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">control_frequency</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exec_start_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start_delay</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">exec_duration</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">resume</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">log_level</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">port_mapping</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">connector_cls</span><span class=\"p\">:</span> <span class=\"nb\">type</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">connector</span><span class=\"o\">.</span><span class=\"n\">Connector</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">connector_kwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.Orchestrator.arun", "modulename": "mhagenta", "qualname": "Orchestrator.arun", "kind": "function", "doc": "<p>Run all the agents as an async method. Use in case you want to control the async task loop yourself.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rabbitmq_image_name (str, optional, default='mha-rabbitmq'):</strong>  The name of the base MHAgentA RabbitMQ image.</li>\n<li><strong>hagent_base_image_name (str, optional, default='mha-base'):</strong>  The name of the base MHAgentA agent image.:</li>\n<li><strong>force_run (bool, optional, default=False):</strong>  In case containers with some of the specified agent IDs exist,\nspecify whether to force remove the old container to run the new ones. Otherwise, an exception will be\nraised.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>NameError:</strong>  Raised if a container for one of the specified agent IDs already exists and <code>force_run</code> is False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rabbitmq_image_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mha-rabbitmq&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hagent_base_image_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mha-base&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">force_run</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "mhagenta.Orchestrator.run", "modulename": "mhagenta", "qualname": "Orchestrator.run", "kind": "function", "doc": "<p>Run all the agents.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rabbitmq_image_name (str, optional, default='mha-rabbitmq'):</strong>  The name of the base MHAgentA RabbitMQ image.</li>\n<li><strong>hagent_base_image_name (str, optional, default='mha-base'):</strong>  The name of the base MHAgentA agent image.:</li>\n<li><strong>force_run (bool, optional, default=False):</strong>  In case containers with some of the specified agent IDs exist,\nspecify whether to force remove the old container to run the new ones. Otherwise, an exception will be\nraised.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>NameError:</strong>  Raised if a container for one of the specified agent IDs already exists and <code>force_run</code> is False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rabbitmq_image_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mha-rabbitmq&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">hagent_base_image_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mha-base&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">force_run</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.State", "modulename": "mhagenta", "qualname": "State", "kind": "class", "doc": "<p>Container for module's internal state enriched with additional information and functionality.</p>\n\n<p>State creation is handled by the agent's root controller. Can be used to access agent time, directory of agent\nmodule IDs, and to send out messages to other modules.</p>\n\n<p>T resolves to a module-specific outbox class for convenient hinting when sending messages to other modules.</p>\n", "bases": "typing.Generic[T]"}, {"fullname": "mhagenta.State.agent_id", "modulename": "mhagenta", "qualname": "State.agent_id", "kind": "variable", "doc": "<p>Unique ID of the parent agent.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: agent_id specified at the agent's creation.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "mhagenta.State.module_id", "modulename": "mhagenta", "qualname": "State.module_id", "kind": "variable", "doc": "<p>Unique (within the scope of the parent agent) identifier of the current module.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: module_id specified in the module base object.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "mhagenta.State.time", "modulename": "mhagenta", "qualname": "State.time", "kind": "variable", "doc": "<p>Agent's execution current time.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: time in seconds since the start of the agent's execution.</p>\n</blockquote>\n", "annotation": ": float"}, {"fullname": "mhagenta.State.directory", "modulename": "mhagenta", "qualname": "State.directory", "kind": "variable", "doc": "<p>Agent's directory of module IDs.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Directory: directory object containing information about agent's module types and IDs.</p>\n</blockquote>\n", "annotation": ": mhagenta.utils.common.classes.Directory"}, {"fullname": "mhagenta.State.outbox", "modulename": "mhagenta", "qualname": "State.outbox", "kind": "variable", "doc": "<p>Outbox object for this module. Use its methods to send messages to other modules.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>T: module-specific outbox object.</p>\n</blockquote>\n", "annotation": ": T"}, {"fullname": "mhagenta.Directory", "modulename": "mhagenta", "qualname": "Directory", "kind": "class", "doc": "<p>Directory of all module names and types for easier communication definition.</p>\n\n<p>Created by the agent's root controller.</p>\n"}, {"fullname": "mhagenta.Directory.perception", "modulename": "mhagenta", "qualname": "Directory.perception", "kind": "variable", "doc": "<p>(Property) List of Perceptor IDs.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: List of <code>module_id</code>s of all the agent <code>Perceptor</code>s</p>\n</blockquote>\n", "annotation": ": list[str]"}, {"fullname": "mhagenta.Directory.actuation", "modulename": "mhagenta", "qualname": "Directory.actuation", "kind": "variable", "doc": "<p>(Property) List of Actuator IDs.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: List of <code>module_id</code>s of all the agent <code>Actuator</code>s</p>\n</blockquote>\n", "annotation": ": list[str]"}, {"fullname": "mhagenta.Directory.ll_reasoning", "modulename": "mhagenta", "qualname": "Directory.ll_reasoning", "kind": "variable", "doc": "<p>(Property) List of Low-level reasoner IDs.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: List of <code>module_id</code>s of all the agent <code>LLReasoner</code>s</p>\n</blockquote>\n", "annotation": ": list[str]"}, {"fullname": "mhagenta.Directory.learning", "modulename": "mhagenta", "qualname": "Directory.learning", "kind": "variable", "doc": "<p>(Property) List of Learner IDs.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: List of <code>module_id</code>s of all the agent <code>Learner</code>s</p>\n</blockquote>\n", "annotation": ": list[str]"}, {"fullname": "mhagenta.Directory.knowledge", "modulename": "mhagenta", "qualname": "Directory.knowledge", "kind": "variable", "doc": "<p>(Property) List of Knowledge model IDs.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: List of <code>module_id</code>s of all the agent <code>Knowledge</code>s</p>\n</blockquote>\n", "annotation": ": list[str]"}, {"fullname": "mhagenta.Directory.hl_reasoning", "modulename": "mhagenta", "qualname": "Directory.hl_reasoning", "kind": "variable", "doc": "<p>(Property) List of High-level reasoner IDs.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: List of <code>module_id</code>s of all the agent <code>HLReasoner</code>s</p>\n</blockquote>\n", "annotation": ": list[str]"}, {"fullname": "mhagenta.Directory.goals", "modulename": "mhagenta", "qualname": "Directory.goals", "kind": "variable", "doc": "<p>(Property) List of Goal graph IDs.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: List of <code>module_id</code>s of all the agent <code>goal_graph</code>s</p>\n</blockquote>\n", "annotation": ": list[str]"}, {"fullname": "mhagenta.Directory.memory", "modulename": "mhagenta", "qualname": "Directory.memory", "kind": "variable", "doc": "<p>(Property) List of Memory structure IDs.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: List of <code>module_id</code>s of all the agent <code>Memory</code>s</p>\n</blockquote>\n", "annotation": ": list[str]"}, {"fullname": "mhagenta.Observation", "modulename": "mhagenta", "qualname": "Observation", "kind": "class", "doc": "<p>Pydantic dataclass for agent's observations.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>observation_type (str):</strong>  type of the observation.</li>\n<li><strong>value (Any):</strong>  observed object.</li>\n</ul>\n"}, {"fullname": "mhagenta.Goal", "modulename": "mhagenta", "qualname": "Goal", "kind": "class", "doc": "<p>Pydantic dataclass for agent's goals.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>state (list[Belief]):</strong>  Belief-based description of the goal state.</li>\n<li><strong>misc (dict[str, Any]):</strong>  keyword dictionary of additional relevant information.</li>\n</ul>\n"}, {"fullname": "mhagenta.Belief", "modulename": "mhagenta", "qualname": "Belief", "kind": "class", "doc": "<p>Pydantic dataclass for agent's beliefs.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>predicate (str):</strong>  predicate name.</li>\n<li><strong>arguments (tuple[str]):</strong>  predicate's arguments.</li>\n<li><strong>misc (dict[str, Any]):</strong>  keyword dictionary of additional relevant information.</li>\n</ul>\n"}, {"fullname": "mhagenta.ActionStatus", "modulename": "mhagenta", "qualname": "ActionStatus", "kind": "class", "doc": "<p>Pydantic dataclass for action statuses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>status (Any):</strong>  execution status of the action.</li>\n</ul>\n"}, {"fullname": "mhagenta.bases", "modulename": "mhagenta.bases", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "mhagenta.bases.ModuleBase", "modulename": "mhagenta.bases", "qualname": "ModuleBase", "kind": "class", "doc": "<p>Base class for agent module definitions. Contains templates for all basic functions that define module behaviour.</p>\n"}, {"fullname": "mhagenta.bases.ModuleBase.__init__", "modulename": "mhagenta.bases", "qualname": "ModuleBase.__init__", "kind": "function", "doc": "<p>ModuleBase constructor.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>module_id (str):</strong>  unique (in scope of an agent) ID of the module.</li>\n<li><strong>initial_state (dict[str, Any], optional):</strong>  dictionary of fields and corresponding values to be inserted into\nmodule's internal state at initialization. Later on can be accessed via State.field.</li>\n<li><strong>init_kwargs (dict[str, Any], optional):</strong>  keyword arguments to be passed to the <code>on_init</code> method.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">module_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">initial_state</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">init_kwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "mhagenta.bases.ModuleBase.step", "modulename": "mhagenta.bases", "qualname": "ModuleBase.step", "kind": "function", "doc": "<p>Base for module's step function. If not overridden, the module will NOT take periodic step actions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (State):</strong>  module's internal state enriched with relevant runtime information and functionality.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>State: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.ModuleBase.on_init", "modulename": "mhagenta.bases", "qualname": "ModuleBase.on_init", "kind": "function", "doc": "<p>Called after the module finished initializing</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>**kwargs:</strong>  additional keyword arguments. Their values need to be passed to the module constructor.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.ModuleBase.on_first", "modulename": "mhagenta.bases", "qualname": "ModuleBase.on_first", "kind": "function", "doc": "<p>Called right after agent's execution start, before the first call to the regular step function.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state:</strong>  module's internal state enriched with relevant runtime information and functionality.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>State: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.ModuleBase.on_last", "modulename": "mhagenta.bases", "qualname": "ModuleBase.on_last", "kind": "function", "doc": "<p>Called right after agent's execution stop is initiated, the last behavioral action module can take.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state:</strong>  module's internal state enriched with relevant runtime information and functionality.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>State: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.ModuleBase.is_reactive", "modulename": "mhagenta.bases", "qualname": "ModuleBase.is_reactive", "kind": "variable", "doc": "<p>Shows whether the module is reactive (i.e. if it has internal action loop or just reacts to communications).</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the module is reactive, otherwise False.</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "mhagenta.bases.PerceptorBase", "modulename": "mhagenta.bases", "qualname": "PerceptorBase", "kind": "class", "doc": "<p>Base class for defining Perceptor behavior (also inherits common methods from <code>ModuleBase</code>).</p>\n\n<p>To implement a custom behavior, override the empty base functions: <code>on_init</code>, <code>step</code>, <code>on_first</code>, <code>on_last</code>, and/or\nreactions to messages from other modules.</p>\n", "bases": "mhagenta.core.processes.mha_module.ModuleBase"}, {"fullname": "mhagenta.bases.PerceptorBase.on_request", "modulename": "mhagenta.bases", "qualname": "PerceptorBase.on_request", "kind": "function", "doc": "<p>Override to define perceptor's reaction to receiving an observation reqeust.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (PerceptorState):</strong>  Perceptor's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender:</strong>  <code>module_id</code> of the low-level reasoner that sent the request.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>PerceptorState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">perception</span><span class=\"o\">.</span><span class=\"n\">perceptor</span><span class=\"o\">.</span><span class=\"n\">PerceptorOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">perception</span><span class=\"o\">.</span><span class=\"n\">perceptor</span><span class=\"o\">.</span><span class=\"n\">PerceptorOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.ActuatorBase", "modulename": "mhagenta.bases", "qualname": "ActuatorBase", "kind": "class", "doc": "<p>Base class for defining Actuator behavior (also inherits common methods from <code>ModuleBase</code>).</p>\n\n<p>To implement a custom behavior, override the empty base functions: <code>on_init</code>, <code>step</code>, <code>on_first</code>, <code>on_last</code>, and/or\nreactions to messages from other modules.</p>\n", "bases": "mhagenta.core.processes.mha_module.ModuleBase"}, {"fullname": "mhagenta.bases.ActuatorBase.on_request", "modulename": "mhagenta.bases", "qualname": "ActuatorBase.on_request", "kind": "function", "doc": "<p>Override to define actuator's reaction to receiving an action reqeust.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (ActuatorState):</strong>  Actuator's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender (str):</strong>  <code>module_id</code> of the low-level reasoner that sent the request.\n**kwargs: additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ActuatorState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">actuation</span><span class=\"o\">.</span><span class=\"n\">actuator</span><span class=\"o\">.</span><span class=\"n\">ActuatorOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">actuation</span><span class=\"o\">.</span><span class=\"n\">actuator</span><span class=\"o\">.</span><span class=\"n\">ActuatorOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.LLReasonerBase", "modulename": "mhagenta.bases", "qualname": "LLReasonerBase", "kind": "class", "doc": "<p>Base class for defining Low-level reasoner behavior (also inherits common methods from <code>ModuleBase</code>).</p>\n\n<p>To implement a custom behavior, override the empty base functions: <code>on_init</code>, <code>step</code>, <code>on_first</code>, <code>on_last</code>, and/or\nreactions to messages from other modules.</p>\n", "bases": "mhagenta.core.processes.mha_module.ModuleBase"}, {"fullname": "mhagenta.bases.LLReasonerBase.on_observation", "modulename": "mhagenta.bases", "qualname": "LLReasonerBase.on_observation", "kind": "function", "doc": "<p>Override to define low-level reasoner's reaction to receiving an observation object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (LLState):</strong>  Low-level reasoner's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender (str):</strong>  <code>module_id</code> of the Perceptor that sent the observation.</li>\n<li><strong>observation (Observation):</strong>  received observation object.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>LLState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">low_level_reasoner</span><span class=\"o\">.</span><span class=\"n\">LLOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">observation</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Observation</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">low_level_reasoner</span><span class=\"o\">.</span><span class=\"n\">LLOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.LLReasonerBase.on_action_status", "modulename": "mhagenta.bases", "qualname": "LLReasonerBase.on_action_status", "kind": "function", "doc": "<p>Override to define low-level reasoner's reaction to receiving an action status object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (LLState):</strong>  Low-level reasoner's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender (str):</strong>  <code>module_id</code> of the Actuator that sent the status report.</li>\n<li><strong>action_status (ActionStatus):</strong>  received action status object.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>LLState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">low_level_reasoner</span><span class=\"o\">.</span><span class=\"n\">LLOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">action_status</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">ActionStatus</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">low_level_reasoner</span><span class=\"o\">.</span><span class=\"n\">LLOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.LLReasonerBase.on_goal_update", "modulename": "mhagenta.bases", "qualname": "LLReasonerBase.on_goal_update", "kind": "function", "doc": "<p>Override to define low-level reasoner's reaction to receiving a goals update.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (LLState):</strong>  Low-level reasoner's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender (str):</strong>  <code>module_id</code> of the Goal graph that sent the goal update.</li>\n<li><strong>goals (list[Goal]):</strong>  received list of updated goals.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>LLState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">low_level_reasoner</span><span class=\"o\">.</span><span class=\"n\">LLOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">goals</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Goal</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">low_level_reasoner</span><span class=\"o\">.</span><span class=\"n\">LLOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.LLReasonerBase.on_model", "modulename": "mhagenta.bases", "qualname": "LLReasonerBase.on_model", "kind": "function", "doc": "<p>Override to define low-level reasoner's reaction to receiving a learned model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (LLState):</strong>  Low-level reasoner's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender (str):</strong>  <code>module_id</code> of the learner that sent the model.</li>\n<li><strong>model (Any):</strong>  received learned model object.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>LLState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">low_level_reasoner</span><span class=\"o\">.</span><span class=\"n\">LLOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">low_level_reasoner</span><span class=\"o\">.</span><span class=\"n\">LLOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.LLReasonerBase.on_learning_status", "modulename": "mhagenta.bases", "qualname": "LLReasonerBase.on_learning_status", "kind": "function", "doc": "<p>Override to define low-level reasoner's reaction to receiving a learning status.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (LLState):</strong>  Low-level reasoner's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender (str):</strong>  <code>module_id</code> of the learner that sent the learning status.</li>\n<li><strong>learning_status (Any):</strong>  received learning status object.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>LLState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">low_level_reasoner</span><span class=\"o\">.</span><span class=\"n\">LLOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">learning_status</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">low_level_reasoner</span><span class=\"o\">.</span><span class=\"n\">LLOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.LearnerBase", "modulename": "mhagenta.bases", "qualname": "LearnerBase", "kind": "class", "doc": "<p>Base class for defining Learner behavior (also inherits common methods from <code>ModuleBase</code>).</p>\n\n<p>To implement a custom behavior, override the empty base functions: <code>on_init</code>, <code>step</code>, <code>on_first</code>, <code>on_last</code>, and/or\nreactions to messages from other modules.</p>\n", "bases": "mhagenta.core.processes.mha_module.ModuleBase"}, {"fullname": "mhagenta.bases.LearnerBase.on_task", "modulename": "mhagenta.bases", "qualname": "LearnerBase.on_task", "kind": "function", "doc": "<p>Override to define learner's reaction to receiving a learning task.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (LearnerState):</strong>  Learner's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender (str):</strong>  <code>module_id</code> of the low-level reasoner that sent the learning task.</li>\n<li><strong>task (Any):</strong>  received learning task object.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>LearnerState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">learning</span><span class=\"o\">.</span><span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">LearnerOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">task</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">learning</span><span class=\"o\">.</span><span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">LearnerOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.LearnerBase.on_memories", "modulename": "mhagenta.bases", "qualname": "LearnerBase.on_memories", "kind": "function", "doc": "<p>Override to define learner's reaction to receiving a collection of memories.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (LearnerState):</strong>  Learner's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender (str):</strong>  <code>module_id</code> of the memory structure that send the memories.</li>\n<li><strong>observations (Iterable[Observation]):</strong>  received collection of memories (observation objects).</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>LearnerState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">learning</span><span class=\"o\">.</span><span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">LearnerOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">observations</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Observation</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">learning</span><span class=\"o\">.</span><span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">LearnerOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.LearnerBase.on_model_request", "modulename": "mhagenta.bases", "qualname": "LearnerBase.on_model_request", "kind": "function", "doc": "<p>Override to define learner's reaction to receiving a model request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (LearnerState):</strong>  Learner's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender (str):</strong>  <code>module_id</code> of the low-level reasoner that sent the model request.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>LearnerState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">learning</span><span class=\"o\">.</span><span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">LearnerOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">learning</span><span class=\"o\">.</span><span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">LearnerOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.KnowledgeBase", "modulename": "mhagenta.bases", "qualname": "KnowledgeBase", "kind": "class", "doc": "<p>Base class for defining Knowledge model behavior (also inherits common methods from <code>ModuleBase</code>).</p>\n\n<p>To implement a custom behavior, override the empty base functions: <code>on_init</code>, <code>step</code>, <code>on_first</code>, <code>on_last</code>, and/or\nreactions to messages from other modules.</p>\n", "bases": "mhagenta.core.processes.mha_module.ModuleBase"}, {"fullname": "mhagenta.bases.KnowledgeBase.on_belief_update", "modulename": "mhagenta.bases", "qualname": "KnowledgeBase.on_belief_update", "kind": "function", "doc": "<p>Override to define knowledge model's reaction to receiving a belief update.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (KnowledgeState):</strong>  Knowledge model's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender (str):</strong>  <code>module_id</code> of the module (low-level or high-level reasoner) that sent the beliefs.</li>\n<li><strong>beliefs (Iterable[Belief]):</strong>  received collection of beliefs.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>KnowledgeState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">high_level</span><span class=\"o\">.</span><span class=\"n\">knowledge</span><span class=\"o\">.</span><span class=\"n\">knowledge</span><span class=\"o\">.</span><span class=\"n\">KnowledgeOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">beliefs</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Belief</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">high_level</span><span class=\"o\">.</span><span class=\"n\">knowledge</span><span class=\"o\">.</span><span class=\"n\">knowledge</span><span class=\"o\">.</span><span class=\"n\">KnowledgeOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.KnowledgeBase.on_belief_request", "modulename": "mhagenta.bases", "qualname": "KnowledgeBase.on_belief_request", "kind": "function", "doc": "<p>Override to define knowledge model's reaction to receiving a belief request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (KnowledgeState):</strong>  Knowledge model's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender (str):</strong>  <code>module_id</code> of the high-level reasoner that sent the request.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>KnowledgeState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">high_level</span><span class=\"o\">.</span><span class=\"n\">knowledge</span><span class=\"o\">.</span><span class=\"n\">knowledge</span><span class=\"o\">.</span><span class=\"n\">KnowledgeOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">high_level</span><span class=\"o\">.</span><span class=\"n\">knowledge</span><span class=\"o\">.</span><span class=\"n\">knowledge</span><span class=\"o\">.</span><span class=\"n\">KnowledgeOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.HLReasonerBase", "modulename": "mhagenta.bases", "qualname": "HLReasonerBase", "kind": "class", "doc": "<p>Base class for defining High-level reasoner behavior (also inherits common methods from <code>ModuleBase</code>).</p>\n\n<p>To implement a custom behavior, override the empty base functions: <code>on_init</code>, <code>step</code>, <code>on_first</code>, <code>on_last</code>, and/or\nreactions to messages from other modules.</p>\n", "bases": "mhagenta.core.processes.mha_module.ModuleBase"}, {"fullname": "mhagenta.bases.HLReasonerBase.on_belief_update", "modulename": "mhagenta.bases", "qualname": "HLReasonerBase.on_belief_update", "kind": "function", "doc": "<p>Override to define high-level reasoner's reaction to receiving a belief update.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (HLState):</strong>  High-level reasoner's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender (str):</strong>  <code>module_id</code> of the Knowledge model that sent the update.</li>\n<li><strong>beliefs (Iterable[Belief]):</strong>  received collection of beliefs.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HLState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">high_level</span><span class=\"o\">.</span><span class=\"n\">high_level_reasoner</span><span class=\"o\">.</span><span class=\"n\">HLOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">beliefs</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Belief</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">high_level</span><span class=\"o\">.</span><span class=\"n\">high_level_reasoner</span><span class=\"o\">.</span><span class=\"n\">HLOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.HLReasonerBase.on_goal_update", "modulename": "mhagenta.bases", "qualname": "HLReasonerBase.on_goal_update", "kind": "function", "doc": "<p>Override to define high-level reasoner's reaction to receiving a goal update.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state:</strong>  High-level reasoner's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender (str):</strong>  <code>module_id</code> of the goal graph that sent the update.</li>\n<li><strong>goals (Iterable[Goal]):</strong>  received collection of goals.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HLState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">high_level</span><span class=\"o\">.</span><span class=\"n\">high_level_reasoner</span><span class=\"o\">.</span><span class=\"n\">HLOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">goals</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Goal</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">high_level</span><span class=\"o\">.</span><span class=\"n\">high_level_reasoner</span><span class=\"o\">.</span><span class=\"n\">HLOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.GoalGraphBase", "modulename": "mhagenta.bases", "qualname": "GoalGraphBase", "kind": "class", "doc": "<p>Base class for defining Goal graph behavior (also inherits common methods from <code>ModuleBase</code>).</p>\n\n<p>To implement a custom behavior, override the empty base functions: <code>on_init</code>, <code>step</code>, <code>on_first</code>, <code>on_last</code>, and/or\nreactions to messages from other modules.</p>\n", "bases": "mhagenta.core.processes.mha_module.ModuleBase"}, {"fullname": "mhagenta.bases.GoalGraphBase.on_goal_request", "modulename": "mhagenta.bases", "qualname": "GoalGraphBase.on_goal_request", "kind": "function", "doc": "<p>Override to define goal graph's reaction to receiving a goal request.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (GoalGraphState):</strong>  Goal graph's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender (str):</strong>  <code>module_id</code> of the module (high-level or low-level reasoner) that sent the request.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>GoalGraphState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">high_level</span><span class=\"o\">.</span><span class=\"n\">goals</span><span class=\"o\">.</span><span class=\"n\">goal_graph</span><span class=\"o\">.</span><span class=\"n\">GoalGraphOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">high_level</span><span class=\"o\">.</span><span class=\"n\">goals</span><span class=\"o\">.</span><span class=\"n\">goal_graph</span><span class=\"o\">.</span><span class=\"n\">GoalGraphOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.GoalGraphBase.on_goal_update", "modulename": "mhagenta.bases", "qualname": "GoalGraphBase.on_goal_update", "kind": "function", "doc": "<p>Override to define goal graph's reaction to receiving a goal update.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (GoalGraphState):</strong>  Goal graph's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender (str):</strong>  <code>module_id</code> of the module (high-level or low-level reasoner) that sent the update.</li>\n<li><strong>goals (Iterable[Goal]):</strong>  received collection of goals.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>GoalGraphState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">high_level</span><span class=\"o\">.</span><span class=\"n\">goals</span><span class=\"o\">.</span><span class=\"n\">goal_graph</span><span class=\"o\">.</span><span class=\"n\">GoalGraphOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">goals</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Goal</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">high_level</span><span class=\"o\">.</span><span class=\"n\">goals</span><span class=\"o\">.</span><span class=\"n\">goal_graph</span><span class=\"o\">.</span><span class=\"n\">GoalGraphOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.MemoryBase", "modulename": "mhagenta.bases", "qualname": "MemoryBase", "kind": "class", "doc": "<p>Base class for defining Memory structure behavior (also inherits common methods from <code>ModuleBase</code>).</p>\n\n<p>To implement a custom behavior, override the empty base functions: <code>on_init</code>, <code>step</code>, <code>on_first</code>, <code>on_last</code>, and/or\nreactions to messages from other modules.</p>\n", "bases": "mhagenta.core.processes.mha_module.ModuleBase"}, {"fullname": "mhagenta.bases.MemoryBase.on_observation_request", "modulename": "mhagenta.bases", "qualname": "MemoryBase.on_observation_request", "kind": "function", "doc": "<p>Override to define memory structure's reaction to receiving a request for observation memories.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (MemoryState):</strong>  Memory structure's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender (str):</strong>  <code>module_id</code> of the learner that sent the request.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>MemoryState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">MemoryOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">MemoryOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.MemoryBase.on_belief_request", "modulename": "mhagenta.bases", "qualname": "MemoryBase.on_belief_request", "kind": "function", "doc": "<p>Override to define memory structure's reaction to receiving a request for belief memories.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (MemoryState):</strong>  Memory structure's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender (str):</strong>  <code>module_id</code> of the knowledge model that sent the request.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>MemoryState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">MemoryOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">MemoryOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.MemoryBase.on_observation_update", "modulename": "mhagenta.bases", "qualname": "MemoryBase.on_observation_update", "kind": "function", "doc": "<p>Override to define memory structure's reaction to receiving an update of observation memories.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (MemoryState):</strong>  Memory structure's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender (str):</strong>  <code>module_id</code> of the low-level reasoner that sent the update.</li>\n<li><strong>observations (Iterable[Observation]):</strong>  received collection of observations.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>MemoryState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">MemoryOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">observations</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Observation</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">MemoryOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.bases.MemoryBase.on_belief_update", "modulename": "mhagenta.bases", "qualname": "MemoryBase.on_belief_update", "kind": "function", "doc": "<p>Override to define memory structure's reaction to receiving an update of belief memories.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (MemoryState):</strong>  Memory structure's internal state enriched with relevant runtime information and\nfunctionality.</li>\n<li><strong>sender (str):</strong>  <code>module_id</code> of the knowledge model that sent the update.</li>\n<li><strong>beliefs (Iterable[Belief]):</strong>  received collection of beliefs.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments included in the message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>MemoryState: modified or unaltered internal state of the module.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">MemoryOutbox</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">beliefs</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Belief</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">State</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">MemoryOutbox</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes", "modulename": "mhagenta.outboxes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "mhagenta.outboxes.PerceptorOutbox", "modulename": "mhagenta.outboxes", "qualname": "PerceptorOutbox", "kind": "class", "doc": "<p>Internal communication outbox class for Perceptor.</p>\n\n<p>Used to store and process outgoing messages to other modules.</p>\n", "bases": "mhagenta.utils.common.classes.Outbox"}, {"fullname": "mhagenta.outboxes.PerceptorOutbox.send_observation", "modulename": "mhagenta.outboxes", "qualname": "PerceptorOutbox.send_observation", "kind": "function", "doc": "<p>Sends an observation object to a low-level reasoner.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ll_reasoner_id (str):</strong>  <code>module_id</code> of the low-level reasoner to send the observation to.</li>\n<li><strong>observation (Observation):</strong>  observation object.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ll_reasoner_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">observation</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Observation</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.ActuatorOutbox", "modulename": "mhagenta.outboxes", "qualname": "ActuatorOutbox", "kind": "class", "doc": "<p>Internal communication outbox class for Actuator.</p>\n\n<p>Used to store and process outgoing messages to other modules.</p>\n", "bases": "mhagenta.utils.common.classes.Outbox"}, {"fullname": "mhagenta.outboxes.ActuatorOutbox.send_status", "modulename": "mhagenta.outboxes", "qualname": "ActuatorOutbox.send_status", "kind": "function", "doc": "<p>Sends an action status report object to a low-level reasoner.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ll_reasoner_id (str):</strong>  <code>module_id</code> of the low-level reasoner to report to.</li>\n<li><strong>status (ActionStatus):</strong>  action status object.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ll_reasoner_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">status</span><span class=\"p\">:</span> <span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">ActionStatus</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.LLOutbox", "modulename": "mhagenta.outboxes", "qualname": "LLOutbox", "kind": "class", "doc": "<p>Internal communication outbox class for Low-level reasoner.</p>\n\n<p>Used to store and process outgoing messages to other modules.</p>\n", "bases": "mhagenta.utils.common.classes.Outbox"}, {"fullname": "mhagenta.outboxes.LLOutbox.request_action", "modulename": "mhagenta.outboxes", "qualname": "LLOutbox.request_action", "kind": "function", "doc": "<p>Request an action from an actuator.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>actuator_id (str):</strong>  <code>module_id</code> of the actuator chosen to perform the action.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">actuator_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.LLOutbox.request_observation", "modulename": "mhagenta.outboxes", "qualname": "LLOutbox.request_observation", "kind": "function", "doc": "<p>Request an observation from a perceptor.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>perceptor_id (str):</strong>  <code>module_id</code> of the selected perceptor.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">perceptor_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.LLOutbox.send_beliefs", "modulename": "mhagenta.outboxes", "qualname": "LLOutbox.send_beliefs", "kind": "function", "doc": "<p>Send belief update to a knowledge model module.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>knowledge_id (str):</strong>  <code>module_id</code> of the relevant knowledge model module.</li>\n<li><strong>beliefs (Iterable[Belief]):</strong>  a collection of beliefs to be sent.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">knowledge_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">beliefs</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Belief</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.LLOutbox.request_goals", "modulename": "mhagenta.outboxes", "qualname": "LLOutbox.request_goals", "kind": "function", "doc": "<p>Request new or updated goals from a goal graph.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>goal_graph_id (str):</strong>  <code>module_id</code> of the relevant goal graph.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">goal_graph_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.LLOutbox.send_goal_update", "modulename": "mhagenta.outboxes", "qualname": "LLOutbox.send_goal_update", "kind": "function", "doc": "<p>Update a goal graph on the goal statuses.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>goal_graph_id (str):</strong>  <code>module_id</code> of the relevant goal graph.</li>\n<li><strong>goals (Iterable[Goal]):</strong>  collection of goals to report.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">goal_graph_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">goals</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Goal</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.LLOutbox.send_memories", "modulename": "mhagenta.outboxes", "qualname": "LLOutbox.send_memories", "kind": "function", "doc": "<p>Send new memories to a memory structure.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>memory_id (str):</strong>  <code>module_id</code> of the relevant memory structure.</li>\n<li><strong>observations (Iterable[Any]):</strong>  collection of memories to send.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">memory_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">observations</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.LLOutbox.request_model", "modulename": "mhagenta.outboxes", "qualname": "LLOutbox.request_model", "kind": "function", "doc": "<p>Request the current model from a learner.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>learner_id (str):</strong>  <code>module_id</code> of a learner training the required model.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">learner_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.LLOutbox.send_learner_task", "modulename": "mhagenta.outboxes", "qualname": "LLOutbox.send_learner_task", "kind": "function", "doc": "<p>Send a new or updated learning task to a learner.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>learner_id (str):</strong>  <code>module_id</code> of the relevant learner.</li>\n<li><strong>task (Any):</strong>  an object specifying the learning task.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">learner_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">task</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.LearnerOutbox", "modulename": "mhagenta.outboxes", "qualname": "LearnerOutbox", "kind": "class", "doc": "<p>Internal communication outbox class for Learner.</p>\n\n<p>Used to store and process outgoing messages to other modules.</p>\n", "bases": "mhagenta.utils.common.classes.Outbox"}, {"fullname": "mhagenta.outboxes.LearnerOutbox.request_memories", "modulename": "mhagenta.outboxes", "qualname": "LearnerOutbox.request_memories", "kind": "function", "doc": "<p>Request a collection of memories from a memory structure.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>memory_id (str):</strong>  <code>module_id</code> of the relevant memory structure.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">memory_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.LearnerOutbox.send_status", "modulename": "mhagenta.outboxes", "qualname": "LearnerOutbox.send_status", "kind": "function", "doc": "<p>Send learning status to a low-level reasoner.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ll_reasoner_id (str):</strong>  <code>module_id</code> of the low-level reasoner to report to.</li>\n<li><strong>learning_status (Any):</strong>  learning status to report.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ll_reasoner_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">learning_status</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.LearnerOutbox.send_model", "modulename": "mhagenta.outboxes", "qualname": "LearnerOutbox.send_model", "kind": "function", "doc": "<p>Send a learned model to a low-level reasoner.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ll_reasoner_id (str):</strong>  <code>module_id</code> of the relevant low-level reasoner.</li>\n<li><strong>model (Any):</strong>  model to send.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ll_reasoner_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.KnowledgeOutbox", "modulename": "mhagenta.outboxes", "qualname": "KnowledgeOutbox", "kind": "class", "doc": "<p>Internal communication outbox class for Knowledge model.</p>\n\n<p>Used to store and process outgoing messages to other modules.</p>\n", "bases": "mhagenta.utils.common.classes.Outbox"}, {"fullname": "mhagenta.outboxes.KnowledgeOutbox.send_memories", "modulename": "mhagenta.outboxes", "qualname": "KnowledgeOutbox.send_memories", "kind": "function", "doc": "<p>Send an outdated belief collection as a memory to a memory structure.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>memory_id (str):</strong>  <code>module_id</code> of the relevant memory structure.</li>\n<li><strong>beliefs (Iterable[Belief]):</strong>  a collection of beliefs to send.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">memory_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">beliefs</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Belief</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.KnowledgeOutbox.send_beliefs", "modulename": "mhagenta.outboxes", "qualname": "KnowledgeOutbox.send_beliefs", "kind": "function", "doc": "<p>Send a collection of beliefs to a high-level reasoner.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hl_reasoner_id (str):</strong>  <code>module_id</code> of the relevant high-level reasoner structure.</li>\n<li><strong>beliefs:</strong>  a collection of beliefs to send.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">hl_reasoner_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">beliefs</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Belief</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.HLOutbox", "modulename": "mhagenta.outboxes", "qualname": "HLOutbox", "kind": "class", "doc": "<p>Internal communication outbox class for High-level reasoner.</p>\n\n<p>Used to store and process outgoing messages to other modules.</p>\n", "bases": "mhagenta.utils.common.classes.Outbox"}, {"fullname": "mhagenta.outboxes.HLOutbox.request_beliefs", "modulename": "mhagenta.outboxes", "qualname": "HLOutbox.request_beliefs", "kind": "function", "doc": "<p>Request beliefs from a knowledge model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>knowledge_id (str):</strong>  <code>module_id</code> of the relevant knowledge model.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">knowledge_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.HLOutbox.request_memories", "modulename": "mhagenta.outboxes", "qualname": "HLOutbox.request_memories", "kind": "function", "doc": "<p>Request memories of beliefs from a memory structure.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>memory_id (str):</strong>  <code>module_id</code> of the relevant memory structure.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">memory_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.HLOutbox.request_action", "modulename": "mhagenta.outboxes", "qualname": "HLOutbox.request_action", "kind": "function", "doc": "<p>Request an action from an actuator.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>actuator_id (str):</strong>  <code>module_id</code> of the actuator chosen to perform the action.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">actuator_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.HLOutbox.send_beliefs", "modulename": "mhagenta.outboxes", "qualname": "HLOutbox.send_beliefs", "kind": "function", "doc": "<p>Send new or updated beliefs to a knowledge model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>knowledge_id (str):</strong>  <code>module_id</code> of the relevant knowledge model.</li>\n<li><strong>beliefs (Iterable[Belief]):</strong>  a collection of beliefs to send.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">knowledge_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">beliefs</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Belief</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.HLOutbox.send_goals", "modulename": "mhagenta.outboxes", "qualname": "HLOutbox.send_goals", "kind": "function", "doc": "<p>Send new or updated goals to a goal graph.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>goal_graph_id (str):</strong>  <code>module_id</code> of the relevant goal graph.</li>\n<li><strong>goals (Iterable[Goal]):</strong>  a collection of goals to send.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">goal_graph_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">goals</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Goal</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.GoalGraphOutbox", "modulename": "mhagenta.outboxes", "qualname": "GoalGraphOutbox", "kind": "class", "doc": "<p>Internal communication outbox class for Goal graph.</p>\n\n<p>Used to store and process outgoing messages to other modules.</p>\n", "bases": "mhagenta.utils.common.classes.Outbox"}, {"fullname": "mhagenta.outboxes.GoalGraphOutbox.send_goals", "modulename": "mhagenta.outboxes", "qualname": "GoalGraphOutbox.send_goals", "kind": "function", "doc": "<p>Update a low-level or a high-level reasoner on new or modified goals and their statuses.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>receiver_id (str):</strong>  <code>module_id</code> of the relevant low-level or high-level reasoner.</li>\n<li><strong>goals (Iterable[Goal]):</strong>  A collection of goals.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">receiver_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">goals</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Goal</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.MemoryOutbox", "modulename": "mhagenta.outboxes", "qualname": "MemoryOutbox", "kind": "class", "doc": "<p>Internal communication outbox class for Memory structure.</p>\n\n<p>Used to store and process outgoing messages to other modules.</p>\n", "bases": "mhagenta.utils.common.classes.Outbox"}, {"fullname": "mhagenta.outboxes.MemoryOutbox.send_observations", "modulename": "mhagenta.outboxes", "qualname": "MemoryOutbox.send_observations", "kind": "function", "doc": "<p>Send observation memories to a learner.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>learner_id (str):</strong>  <code>module_id</code> of the relevant learner.</li>\n<li><strong>observations (Iterable[Observation]):</strong>  A collection of observations to send.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">learner_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">observations</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Observation</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mhagenta.outboxes.MemoryOutbox.send_beliefs", "modulename": "mhagenta.outboxes", "qualname": "MemoryOutbox.send_beliefs", "kind": "function", "doc": "<p>Send belief memories to a high-level reasoner.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hl_reasoner_id (str):</strong>  <code>module_id</code> of the relevant high-level reasoner.</li>\n<li><strong>beliefs (Iterable[Belief]):</strong>  A collection of beliefs to send.</li>\n<li><strong>**kwargs:</strong>  additional keyword arguments to be included in the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">hl_reasoner_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">beliefs</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">mhagenta</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">Belief</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();